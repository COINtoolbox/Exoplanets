sample=10000,
summarise=FALSE,
plots=FALSE
)
########
#Model
sink("GPGLM.txt")
cat("
model{
#Priors regression parameters
beta  ~ dmnorm(bet0[], Bet0[,])
# Prior for size
#   size~dgamma(0.001,0.001)
#########
#Likelihood
for (i in 1:N) {
eta[i]<-inprod(X[i,], beta[])
log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
#     p[i]<-size/(size+mu[i])
#     Y[i]~dnegbin(p[i],size)
Y[i]~dpois(mu[i])
# Prediction
Pred[i]~dpois(mu[i])
# Discrepancy measures
YNew[i] ~dpois(mu[i])
expY[i] <- mu[i]
varY[i] <- mu[i]
PRes[i] <-(Y[i] - expY[i])/sqrt(varY[i])
PResNew[i] <-(YNew[i] - expY[i])/sqrt(varY[i])
D[i]<-pow(PRes[i],2)
DNew[i]<-pow(PResNew[i],2)
}
Fit<-sum(D[1:N])
New<-sum(DNew[1:N])
}
",fill = TRUE)
sink()
#######
#Inits function
inits0  <- function () {
list(beta  = rnorm(K, 0, 0.01)  #Regression parameters
#      size =runif(1,0.01,10)
)  }
inits1 <- inits0()
inits2 <- inits0()
inits3 <- inits0()
#Parameters to estimate
params1 <- c("beta",
"Pred",
"PRes",
"Fit",
"New"
)
library(parallel)
cl <- makeCluster(3)
GP1 <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = win.data1,
inits = list(inits1,inits2,inits3),
model="GPGLM.txt",
n.chains = 3,
adapt=1000,
monitor=c(params1),
burnin=5000,
sample=10000,
summarise=FALSE,
plots=FALSE
)
b <- gam(n_hab_planets~s(star_metallicity),data=exo_dat)
summary(b)
plot(b,pages=1,residuals=TRUE)
b <- gam(n_hab_planets~s(star_metallicity),family="poisson",data=exo_dat)
summary(b)
plot(b,pages=1,residuals=TRUE)
plot(b,pages=1)
plot(b)
plot(b,pages=1,seWithMean=TRUE)
predict(b)
predict(b,se=TRUE)
predict(b,se=TRUE,type="response")
install.packages("gam")
require(gam)
b <- gam(n_hab_planets~s(star_metallicity),family=poisson(link=log),data=exo_dat)
summary(b)
gam(n_hab_planets~s(star_metallicity),family=poisson(link=log),data=exo_dat)
b <- gam(n_hab_planets~s(star_metallicity),family="poisson(link=log)",data=exo_dat)
gam(n_hab_planets~s(star_metallicity),family="poisson",data=exo_dat)
detach("package:mgcv", unload=TRUE)
gam(n_hab_planets~s(star_metallicity),family="poisson",data=exo_dat)
b <- gam(n_hab_planets~s(star_metallicity),family="poisson",data=exo_dat)
summary(b)
plot(b)
b <- gam(n_hab_planets~s(star_metallicity),family="poisson",data=exo_dat)
summary(b)
b <- gam(n_hab_planets~s(star_metallicity),family=poisson,data=exo_dat)
summary(b)
b <- gam(n_hab_planets~s(star_metallicity,3),family=poisson,data=exo_dat)
summary(b)
plot(b)
exo_dat
exo_dat[,c("n_hab_planets","star_metallicity")]
b <- gam(n_hab_planets~s(star_metallicity,3),family=poisson,data=exo_dat[,c("n_hab_planets","star_metallicity")])
summary(b)
plot(b)
mode(exo_dat[,c("n_hab_planets","star_metallicity")])
dat1<-as.data.frame(exo_dat[,c("n_hab_planets","star_metallicity")])
dat1
b <- gam(n_hab_planets~s(star_metallicity,3),family=poisson,data=dat1)
summary(b)
plot(b)
gam(n_hab_planets~s(star_metallicity,3),family=poisson,data=dat1)
dat1[1,]
gam(n_hab_planets~s(star_metallicity,2),family=poisson,data=dat1)
b <- glm(n_hab_planets~star_metallicity,family=poisson,data=dat1)
summary(b)
plot(b)
########
#Model
sink("GPGLM.txt")
cat("
model{
# 1. Priors
beta  ~ dmnorm(bet0[], Bet0[,])
aB~dnorm(0.001,1e-3)
# Prior for size
# 2. Likelihood function
for (i in 1:N) {
# Logistic part
W[i] ~ dbern(psi.min1[i])
psi.min1[i] <- 1-psi[i]
eta.psi[i]  <- aB
logit(psi[i]) <- eta.psi[i]
# Poisson part
Y[i]~dpois(mu.eff[i])
mu.eff[i]<-W[i]*mu[i]
log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
eta[i]<-inprod(X[i,], beta[])
# Discrepancy measures
expY[i] <- mu[i]*1-psi[i]
varY[i] <- (1-psi[i])*(mu[i] + psi[i]*pow(mu[i], 2))
PRes[i] <-(Y[i] - expY[i])/sqrt(varY[i])
D[i]<-pow(PRes[i],2)
# New Samples
YNew[i] ~dpois(mu.eff[i])
PResNew[i] <-(YNew[i] - expY[i])/sqrt(varY[i])
DNew[i]<-pow(PResNew[i],2)
# Prediction
Pred[i]~dpois(mu.eff[i])
}
Fit<-sum(D[1:N])
New<-sum(DNew[1:N])
}
",fill = TRUE)
sink()
#######
#Inits function
inits0  <- function () {
list(beta  = rnorm(K, 0, 0.01)  #Regression parameters
#      size =runif(1,0.01,10)
)  }
inits1 <- inits0()
inits2 <- inits0()
inits3 <- inits0()
#Parameters to estimate
params1 <- c("beta",
"Pred",
"PRes",
"Fit",
"New"
)
library(parallel)
cl <- makeCluster(3)
GP1 <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = win.data1,
inits = list(inits1,inits2,inits3),
model="GPGLM.txt",
n.chains = 3,
adapt=1000,
monitor=c(params1),
burnin=5000,
sample=10000,
summarise=FALSE,
plots=FALSE
)
#Inits function
inits0  <- function () {
list(beta  = rnorm(K, 0, 0.01),  #Regression parameters
aB = rnorm(K, 0, 0.01)
)  }
inits1 <- inits0()
inits2 <- inits0()
inits3 <- inits0()
#Parameters to estimate
params1 <- c("beta",
"Pred",
"PRes",
"Fit",
"New"
)
library(parallel)
cl <- makeCluster(3)
GP1 <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = win.data1,
inits = list(inits1,inits2,inits3),
model="GPGLM.txt",
n.chains = 3,
adapt=1000,
monitor=c(params1),
burnin=5000,
sample=10000,
summarise=FALSE,
plots=FALSE
)
#Model
sink("GPGLM.txt")
cat("
model{
# 1. Priors
beta  ~ dmnorm(bet0[], Bet0[,])
aB~dnorm(0.001,1e-2)
# Prior for size
# 2. Likelihood function
for (i in 1:N) {
# Logistic part
W[i] ~ dbern(psi.min1[i])
psi.min1[i] <- 1-psi[i]
eta.psi[i]  <- aB
logit(psi[i]) <- eta.psi[i]
# Poisson part
Y[i]~dpois(mu.eff[i])
mu.eff[i]<-W[i]*mu[i]
log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
eta[i]<-inprod(X[i,], beta[])
# Discrepancy measures
expY[i] <- mu[i]*1-psi[i]
varY[i] <- (1-psi[i])*(mu[i] + psi[i]*pow(mu[i], 2))
PRes[i] <-(Y[i] - expY[i])/sqrt(varY[i])
D[i]<-pow(PRes[i],2)
# New Samples
YNew[i] ~dpois(mu.eff[i])
PResNew[i] <-(YNew[i] - expY[i])/sqrt(varY[i])
DNew[i]<-pow(PResNew[i],2)
# Prediction
Pred[i]~dpois(mu.eff[i])
}
Fit<-sum(D[1:N])
New<-sum(DNew[1:N])
}
",fill = TRUE)
sink()
#######
#Inits function
inits0  <- function () {
list(beta  = rnorm(K, 0, 0.01),  #Regression parameters
aB = rnorm(K, 0, 0.01)
)  }
inits1 <- inits0()
inits2 <- inits0()
inits3 <- inits0()
#Parameters to estimate
params1 <- c("beta",
"Pred",
"PRes",
"Fit",
"New"
)
rnorm(K, 0, 0.01)
#Inits function
inits0  <- function () {
list(beta  = rnorm(K, 0, 0.01),  #Regression parameters
aB = rnorm(1, 0, 0.01)
)  }
inits1 <- inits0()
inits2 <- inits0()
inits3 <- inits0()
#Parameters to estimate
params1 <- c("beta",
"Pred",
"PRes",
"Fit",
"New"
)
library(parallel)
cl <- makeCluster(3)
GP1 <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = win.data1,
inits = list(inits1,inits2,inits3),
model="GPGLM.txt",
n.chains = 3,
adapt=1000,
monitor=c(params1),
burnin=5000,
sample=10000,
summarise=FALSE,
plots=FALSE
)
sink("GPGLM.txt")
cat("
model{
# 1. Priors
beta  ~ dmnorm(bet0[], Bet0[,])
aB~dnorm(0.001,1)
# Prior for size
# 2. Likelihood function
for (i in 1:N) {
# Logistic part
W[i] ~ dbern(psi.min1[i])
psi.min1[i] <- 1-psi[i]
eta.psi[i]  <- aB
logit(psi[i]) <- eta.psi[i]
# Poisson part
Y[i]~dpois(mu.eff[i])
mu.eff[i]<-W[i]*mu[i]
log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
eta[i]<-inprod(X[i,], beta[])
# Discrepancy measures
expY[i] <- mu[i]*1-psi[i]
varY[i] <- (1-psi[i])*(mu[i] + psi[i]*pow(mu[i], 2))
PRes[i] <-(Y[i] - expY[i])/sqrt(varY[i])
D[i]<-pow(PRes[i],2)
# New Samples
YNew[i] ~dpois(mu.eff[i])
PResNew[i] <-(YNew[i] - expY[i])/sqrt(varY[i])
DNew[i]<-pow(PResNew[i],2)
# Prediction
Pred[i]~dpois(mu.eff[i])
}
Fit<-sum(D[1:N])
New<-sum(DNew[1:N])
}
",fill = TRUE)
sink()
#######
#Inits function
inits0  <- function () {
list(beta  = rnorm(K, 0, 0.01),  #Regression parameters
aB = rnorm(1, 0, 0.01)
)  }
inits1 <- inits0()
inits2 <- inits0()
inits3 <- inits0()
#Parameters to estimate
params1 <- c("beta",
"Pred",
"PRes",
"Fit",
"New"
)
library(parallel)
cl <- makeCluster(3)
GP1 <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = win.data1,
inits = list(inits1,inits2,inits3),
model="GPGLM.txt",
n.chains = 3,
adapt=1000,
monitor=c(params1),
burnin=5000,
sample=10000,
summarise=FALSE,
plots=FALSE
)
#Model
sink("GPGLM.txt")
cat("
model{
# 1. Priors
beta  ~ dmnorm(bet0[], Bet0[,])
aB~dnorm(0.001,1)
# Prior for size
# 2. Likelihood function
for (i in 1:N) {
# Logistic part
W[i] ~ dbern(psi.min1[i])
psi.min1[i] <- 1-psi[i]
eta.psi[i]  <- aB
logit(psi[i]) <- eta.psi[i]
# Poisson part
Y[i]~dpois(mu.eff[i])
mu.eff[i]<-W[i]*mu[i]
log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
eta[i]<-inprod(X[i,], beta[])
# Discrepancy measures
expY[i] <- mu[i]*1-psi[i]
varY[i] <- (1-psi[i])*(mu[i] + psi[i]*pow(mu[i], 2))
PRes[i] <-(Y[i] - expY[i])/sqrt(varY[i])
D[i]<-pow(PRes[i],2)
# New Samples
YNew[i] ~dpois(mu.eff[i])
PResNew[i] <-(YNew[i] - expY[i])/sqrt(varY[i])
DNew[i]<-pow(PResNew[i],2)
# Prediction
Pred[i]~dpois(mu.eff[i])
}
Fit<-sum(D[1:N])
New<-sum(DNew[1:N])
}
",fill = TRUE)
sink()
#######
#Inits function
inits0  <- function () {
list(beta  = rnorm(K, 0, 0.01),  #Regression parameters
aB = rnorm(1, 0.001, 1)
)  }
inits1 <- inits0()
inits2 <- inits0()
inits3 <- inits0()
#Parameters to estimate
params1 <- c("beta",
"Pred",
"PRes",
"Fit",
"New"
)
library(parallel)
cl <- makeCluster(3)
GP1 <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = win.data1,
inits = list(inits1,inits2,inits3),
model="GPGLM.txt",
n.chains = 3,
adapt=1000,
monitor=c(params1),
burnin=5000,
sample=10000,
summarise=FALSE,
plots=FALSE
)
list(inits1,inits2,inits3)
########
#Model
sink("GPGLM.txt")
cat("
model{
# 1. Priors
beta  ~ dmnorm(bet0[], Bet0[,])
aB~dnorm(0.001,1)
# Prior for size
# 2. Likelihood function
for (i in 1:N) {
# Logistic part
W[i] ~ dbern(psi.min1[i])
psi.min1[i] <- 1-psi[i]
eta.psi[i]  <- aB
logit(psi[i]) <- eta.psi[i]
# Poisson part
Y[i]~dpois(mu.eff[i])
mu.eff[i]<-W[i]*mu[i]
log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
eta[i]<-inprod(X[i,], beta[])
# Discrepancy measures
expY[i] <- mu[i]*(1-psi[i])
varY[i] <- (1-psi[i])*(mu[i] + psi[i]*pow(mu[i], 2))
PRes[i] <-(Y[i] - expY[i])/sqrt(varY[i])
D[i]<-pow(PRes[i],2)
# New Samples
YNew[i] ~dpois(mu.eff[i])
PResNew[i] <-(YNew[i] - expY[i])/sqrt(varY[i])
DNew[i]<-pow(PResNew[i],2)
# Prediction
Pred[i]~dpois(mu.eff[i])
}
Fit<-sum(D[1:N])
New<-sum(DNew[1:N])
}
",fill = TRUE)
sink()
#######
#Inits function
inits0  <- function () {
list(beta  = rnorm(K, 0, 0.01),  #Regression parameters
aB = rnorm(1, 0.001, 1)
)  }
inits1 <- inits0()
inits2 <- inits0()
inits3 <- inits0()
#Parameters to estimate
params1 <- c("beta",
"Pred",
"PRes",
"Fit",
"New"
)
library(parallel)
cl <- makeCluster(3)
GP1 <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = win.data1,
inits = list(inits1,inits2,inits3),
model="GPGLM.txt",
n.chains = 3,
adapt=1000,
monitor=c(params1),
burnin=5000,
sample=10000,
summarise=FALSE,
plots=FALSE
)
require(ggplot2)
require(pscl)
require(MASS)
require(boot)
install.packages("pscl")
require(ggplot2)
require(pscl)
require(MASS)
require(boot)
m1 <- zeroinfl(n_hab_planets ~ star_metallicity,
data = exo_dat, dist = "negbin", EM = TRUE)
summary(m1)
predict(m1,type="response")
plot(m1)
m1
